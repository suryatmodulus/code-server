name: ci

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Note: if: success() is used in several jobs -
# this ensures that it only executes if all previous jobs succeeded.

# if: steps.cache-yarn.outputs.cache-hit != 'true'
# will skip running `yarn install` if it successfully fetched from cache

jobs:
  prebuild:
    name: Pre-build checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Install node.js v12
        uses: actions/setup-node@v2
        with:
          node-version: "12"

      - name: Install helm
        uses: azure/setup-helm@v1

      - name: Fetch dependencies from cache
        id: cache-yarn
        uses: actions/cache@v2
        with:
          path: "**/node_modules"
          key: yarn-build-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        if: steps.cache-yarn.outputs.cache-hit != 'true'
        run: yarn --frozen-lockfile

      - name: Run yarn fmt
        run: yarn fmt
        if: success()

      - name: Run yarn lint
        run: yarn lint
        if: success()

      - name: Run code-server unit tests
        run: yarn test:unit
        if: success()

  build:
    name: Build
    needs: prebuild
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install node.js v12
        uses: actions/setup-node@v2
        with:
          node-version: "12"

      - name: Fetch dependencies from cache
        id: cache-yarn
        uses: actions/cache@v2
        with:
          path: "**/node_modules"
          key: yarn-build-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        if: steps.cache-yarn.outputs.cache-hit != 'true'
        run: yarn --frozen-lockfile

      - name: Build code-server
        run: yarn build

      # Parse the hash of the latest commit inside lib/vscode
      # use this to avoid rebuilding it if nothing changed
      - name: Get latest lib/vscode rev
        id: vscode-rev
        run: echo "::set-output name=rev::$(git log -1 --format='%H' ./lib/vscode)"

      - name: Attempt to fetch vscode build from cache
        id: cache-vscode
        uses: actions/cache@v2
        with:
          path: |
            lib/vscode/.build
            lib/vscode/out-build
            lib/vscode/out-vscode
            lib/vscode/out-vscode-min
          key: vscode-build-${{ steps.vscode-rev.outputs.rev }}

      - name: Build vscode
        if: steps.cache-vscode.outputs.cache-hit != 'true'
        run: yarn build:vscode

      # The release package does not contain any native modules
      # and is neutral to architecture/os/libc version.
      - name: Create release package
        run: yarn release
        if: success()

      # https://github.com/actions/upload-artifact/issues/38
      - name: Compress release package
        run: tar -czf package.tar.gz release

      - name: Upload npm package artifact
        uses: actions/upload-artifact@v2
        with:
          name: npm-package
          path: ./package.tar.gz

  # We use Ubuntu 16.04 here, so that our build is more compatible
  # with older libc versions. We used to (Q1'20) use CentOS 7 here,
  # but it has a full update EOL of Q4'20 and a 'critical security'
  # update EOL of 2024. We're dropping our full support 3 quarters
  # early, but this gets us CI speed benefits on GH.

  # TODO: cache building yarn --production
  # possibly 2m30s of savings(?)
  # this requires refactoring our release scripts

  # TODO: cross-compile on arm64
  package:
    name: x86-64 builds
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-16.04, macos-latest]
      fail-fast: false

    steps:
      - uses: actions/checkout@v2

      - name: Install node.js v12
        uses: actions/setup-node@v2
        with:
          node-version: "12"

      - name: Install nfpm
        run: |
          curl -sfL https://install.goreleaser.com/github.com/goreleaser/nfpm.sh | sh -s -- -b ~/.local/bin v2.3.1
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Download npm package
        uses: actions/download-artifact@v2
        with:
          name: npm-package

      - name: Decompress npm package
        run: tar -xzf package.tar.gz

      - name: Build standalone release
        run: yarn release:standalone

      - name: Sanity test standalone release
        run: yarn test:standalone-release

      - name: Build packages with nfpm
        run: yarn package

      - name: Upload release artifacts
        uses: actions/upload-artifact@v2
        with:
          name: release-packages
          path: ./release-packages

  package-arm64:
    name: Linux ARM64 cross-compile build
    needs: build
    runs-on: ubuntu-16.04
    env:
      AR: aarch64-linux-gnu-ar
      CC: aarch64-linux-gnu-gcc
      CXX: aarch64-linux-gnu-g++
      LINK: aarch64-linux-gnu-g++
      NPM_CONFIG_ARCH: arm64

    steps:
      - uses: actions/checkout@v2

      - name: Install node.js v12
        uses: actions/setup-node@v2
        with:
          node-version: "12"

      - name: Install nfpm
        run: |
          curl -sfL https://install.goreleaser.com/github.com/goreleaser/nfpm.sh | sh -s -- -b ~/.local/bin v2.3.1
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install cross-compiler
        run: sudo apt install g++-aarch64-linux-gnu

      - name: Download npm package
        uses: actions/download-artifact@v2
        with:
          name: npm-package

      - name: Decompress npm package
        run: tar -xzf package.tar.gz

      - name: Build standalone release
        run: yarn release:standalone

      - name: Replace node with arm64 equivalent
        run: |
          wget https://nodejs.org/dist/v12.18.4/node-v12.18.4-linux-arm64.tar.gz
          tar -xzf node-v12.18.4-linux-arm64.tar.gz node-v12.18.4-linux-arm64/bin/node --strip-components=2
          mv ./node ./release-standalone/lib/node

      - name: Build packages with nfpm
        run: yarn package arm64

      - name: Upload release artifacts
        uses: actions/upload-artifact@v2
        with:
          name: release-packages
          path: ./release-packages

  test-e2e:
    name: End-to-end tests
    needs: package
    runs-on: ubuntu-latest
    env:
      PASSWORD: e45432jklfdsab
      CODE_SERVER_ADDRESS: http://localhost:8080
    steps:
      - uses: actions/checkout@v2

      - name: Install node.js v12
        uses: actions/setup-node@v2
        with:
          node-version: "12"

      - name: Install playwright
        uses: microsoft/playwright-github-action@v1

      - name: Fetch dependencies from cache
        id: cache-yarn
        uses: actions/cache@v2
        with:
          path: "**/node_modules"
          key: yarn-build-${{ hashFiles('**/yarn.lock') }}

      - name: Download release packages
        uses: actions/download-artifact@v2
        with:
          name: release-packages
          path: ./release-packages

      - name: Untar code-server file
        run: |
          cd release-packages && tar -xzf code-server*-linux-amd64.tar.gz

      - name: Install dependencies
        if: steps.cache-yarn.outputs.cache-hit != 'true'
        run: yarn --frozen-lockfile

      # HACK: this shouldn't need to exist, but put it here anyway
      # in an attempt to solve Playwright cache failures.
      - name: Reinstall playwright
        if: steps.cache-yarn.outputs.cache-hit == 'true'
        run: |
          cd test/
          rm -r node_modules/playwright
          yarn install --check-files

      - name: Run end-to-end tests
        run: |
          ./release-packages/code-server*-linux-amd64/bin/code-server &
          yarn test:e2e

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: test-videos
          path: ./test/e2e/videos

      - name: Remove release packages and test artifacts
        run: rm -rf ./release-packages ./test/e2e/videos

  docker-amd64:
    runs-on: ubuntu-latest
    needs: package
    steps:
      - uses: actions/checkout@v2

      - name: Download release package
        uses: actions/download-artifact@v2
        with:
          name: release-packages
          path: ./release-packages

      - name: Run ./ci/steps/build-docker-image.sh
        run: ./ci/steps/build-docker-image.sh

      - name: Upload release image
        uses: actions/upload-artifact@v2
        with:
          name: release-images
          path: ./release-images
